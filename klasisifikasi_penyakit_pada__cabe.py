# -*- coding: utf-8 -*-
"""Klasisifikasi_penyakit_pada _cabe.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/19pHXuxb2RZdHYvIHWoqGkJvXZaoDwqNx
"""

from zipfile import ZipFile
zf = ZipFile('/content/drive/MyDrive/cabe.zip', 'r')
zf.extractall('tmp/')
zf.close()

from google.colab import drive
drive.mount('/content/drive')

import os 
os.listdir('tmp/')

train_dir = 'tmp/train'
validation_dir = 'tmp/val'
test_dir =  'tmp/test'
classes =  ['Healthy', 'leaf curl', 'leaf spot', 'whitefly', 'yellowish']

from tensorflow.keras.preprocessing.image import ImageDataGenerator
image_train_gen = ImageDataGenerator(rescale=1./255,
                                     zoom_range=0.50,
                                     rotation_range=45,
                                     horizontal_flip=True,
                                     width_shift_range=0.15,
                                     height_shift_range=0.15)
image_validation_gen = ImageDataGenerator(rescale=1./255,)

train_dataset = image_train_gen.flow_from_directory(train_dir,
                                                     shuffle=True,
                                                     batch_size=32,
                                                     target_size=(224,224),
                                                     class_mode='categorical')
validation_dataset = image_validation_gen.flow_from_directory(validation_dir,
                                                     shuffle=True,
                                                     batch_size=32,
                                                     target_size=(224,224),
                                                     class_mode='categorical')

def plotImages(image_arr):
    fig,axes = plt.subplots(1, 5, figsize=(20,20))
    axes = axes.flatten()
    for img,ax in zip(image_arr,axes):
        ax.imshow(img)
    plt.tight_layout()
    plt.show()

import matplotlib.pyplot as plt

# Plot a few training images
img_array = [train_dataset[0][0][0] for i in range(5)]
plotImages(img_array)

from tensorflow.keras.applications.resnet50 import ResNet50 as ResModel
#from keras.applications.vgg16 import VGG16 as VGG16Model
img_width, img_height = 224, 224
model = ResModel(weights = 'imagenet', include_top=False, input_shape = (img_width, img_height, 3))

from keras.layers import Dropout, Flatten, Dense, GlobalAveragePooling2D
from keras.models import Sequential, Model 
for layer in model.layers:
    layer.trainable = False

x = model.output
x = Flatten()(x)
x = Dense(1024, activation="relu")(x)
x = Dropout(0.5)(x)
x = Dense(1024, activation="relu")(x)
predictions = Dense(5, activation="softmax")(x)

model.summary()

model_final = Model(inputs = model.input, outputs = predictions)

import tensorflow as tf
LEARNING_RATE = 0.001 #@param {type:"number"}

model_final.compile(optimizer = tf.keras.optimizers.Adam(),
              loss = 'categorical_crossentropy',
              metrics = ['accuracy'])

import tensorflow as tf
model = tf.keras.Sequential([
        tf.keras.layers.Conv2D(16,(3,3),activation = 'relu',input_shape = (224,224,3)),
        tf.keras.layers.MaxPooling2D(2,2),
        tf.keras.layers.Conv2D(32,(3,3),activation = 'relu'),
        tf.keras.layers.MaxPooling2D(2,2),
        tf.keras.layers.Conv2D(64,(3,3),activation = 'relu'),
        tf.keras.layers.MaxPooling2D(2,2),
        tf.keras.layers.Flatten(),
        tf.keras.layers.Dropout(0.5),
        tf.keras.layers.Dense(128,activation = 'relu'),
        tf.keras.layers.Dropout(0.2),
        tf.keras.layers.Dense(5,activation = 'softmax')])
model.summary()

LEARNING_RATE = 0.001 #@param {type:"number"}

model.compile(optimizer = tf.keras.optimizers.Adam(),
              loss = 'categorical_crossentropy',
              metrics = ['accuracy'])

his=model.fit(train_dataset, validation_data=validation_dataset,epochs=50)

# Plot training and validation graphs
acc = his.history['accuracy']
val_accuracy = his.history['val_accuracy']

loss = his.history['loss']
val_loss = his.history['val_loss']

epochs_range = range(50)

plt.figure(figsize=(12,12))
plt.subplot(1,2,1)
plt.plot(epochs_range,acc,label='Training Accuracy')
plt.plot(epochs_range,val_accuracy,label='Validation Accuracy')
plt.legend(loc='lower right')
plt.title('Training and Validation Accuracy')

plt.subplot(1,2,2)
plt.plot(epochs_range,loss,label='Training Loss')
plt.plot(epochs_range,val_loss,label='Validation Loss')
plt.legend(loc='upper right')
plt.title('Training and Validation Loss')
plt.show()

model.save("cabe.h5")

